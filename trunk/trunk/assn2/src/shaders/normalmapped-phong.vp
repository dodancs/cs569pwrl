#version 110

/* Uniform Inputs */
uniform vec4 lightPosition;
uniform vec4 eyePosition;

/* Outputs -> fragment program */
varying vec3 lightVector, eyeVector;
varying vec2 texCoord;

void main() {
	/* The following statement is almost equivalent to writing
		"gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;".
	   Reasons for preferring ftransform() over the above are 
	   that this may a) be faster and b) is guaranteed to return 
	   values that are numerically identical to the fixed-function
	   pipeline results.
	*/
	gl_Position = ftransform();

	/* Normal, tangent and binormal in world coordinates */
	vec3 normal = normalize(gl_NormalMatrix * gl_Normal);
	vec3 tangent = gl_NormalMatrix * gl_Color.rgb;

	/* Gram-schmidt orthogonalization (needed for
	   normal maps on objects with non-uniform scaling) */
	tangent = normalize(tangent - normal * dot(tangent, normal));

	vec3 binormal = cross(normal, tangent);

	texCoord = gl_MultiTexCoord0.xy;

	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
	vec3 tmpVec = lightPosition.xyz - vVertex;

	lightVector.x = dot(tmpVec, tangent);
	lightVector.y = dot(tmpVec, binormal);
	lightVector.z = dot(tmpVec, normal);
	
	/* Vertex->Light in world coordinates */
	//vec4 worldSpacePos = gl_ModelViewMatrix * gl_Vertex;
	//lightVector = (lightPosition - worldSpacePos).xyz;
	
	tmpVec = eyePosition.xyz - vVertex;
	eyeVector.x = dot(tmpVec, tangent);
	eyeVector.y = dot(tmpVec, binormal);
	eyeVector.z = dot(tmpVec, normal);
	
	/* Vertex->Eye in world coordinates */
	//eyeVector = (eyePosition - worldSpacePos).xyz;
}