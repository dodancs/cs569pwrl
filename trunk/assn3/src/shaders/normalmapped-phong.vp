#version 110

/* Uniform Inputs */
uniform vec4 lightPosition;
uniform vec4 eyePosition;

/* Outputs -> fragment program */
varying vec3 lightVector, eyeVector;

void main() {
	/* The following statement is almost equivalent to writing
		"gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;".
	   Reasons for preferring ftransform() over the above are 
	   that this may a) be faster and b) is guaranteed to return 
	   values that are numerically identical to the fixed-function
	   pipeline results.
	*/
	gl_Position = ftransform();

	/* Normal, tangent and binormal in world coordinates */
	vec3 normal = normalize(gl_NormalMatrix * gl_Normal);
	vec3 tangent = gl_NormalMatrix * gl_Color.rgb;

	/* Gram-schmidt orthogonalization (needed for
	   normal maps on objects with non-uniform scaling) */
	tangent = normalize(tangent - normal * dot(tangent, normal));

	vec3 binormal = cross(normal, tangent);

	/* Vertex->Light in world coordinates */
	vec4 worldSpacePos = gl_ModelViewMatrix * gl_Vertex;
	vec3 toLight = (lightPosition - worldSpacePos).xyz;
	/* Vertex->Eye in world coordinates */
	vec3 toEye = (eyePosition - worldSpacePos).xyz;

	/* Transform into tangent-space coordinate system */
	lightVector = vec3(
		dot(tangent, toLight),
		dot(binormal, toLight),
		dot(normal, toLight)
	);

	eyeVector = vec3(
		dot(tangent, toEye),
		dot(binormal, toEye),
		dot(normal, toEye)
	);

	/* Forward the texture coordinates */
	gl_TexCoord[0] = gl_MultiTexCoord0;
}